Q.2: Prefer const, enums and inlines to #define macros. 

	Class specefic static const variables discussion, 2nd last paragraph on page 14.
	you are saying:
		"Because the initial value of class constants is provided where the const is declared"
	I think you mean:
		"Because the initial value of class static constants is provided where the const is declared"

	Non static constants data members are initialized via initalization list. 

	It is worth to mention specefically that macros do not allow to step debug in the gdb, one of the best advantage
	inline functions have over macro computation. Though you have already mentioned that nothing goes to symbol
	table from the macro definition.


Q.3 while(a * b = c); where will be taken as while( (a* b) = c);
	where programmer really meant is while( (a * b) == c)
	here while( (a * b) = c) is wrong assumption, as (a*b) does not return any reference and it returns by value for operator *. Not sure if it works for only user defined data types. 	
	
Q.7 For virtual destruction:
	Usually class at top hierarchy must be virtual, rather than some in middle order.
	becuase lowest derived class pointer could be implicitly typecasted and stored in containder of pointers
	of topmost parent.

Q.24: dynamic_cast is applicalbe for downcasting of the polymorphic base class pointers only.	

Q.27: normal casting:with genearl implementaion base class part is put first in memory layout of object. but I think
		that is implementation dependant. As well, mutpliple/multilevel hierarchy you can not just point assume that
		base class you are inheriting starts are first bye only. You may reorder the inheritance base classes, which
		might change the object layout.

		h.	prefer c++ casting over old one. It is safer, noticiable , can grep. It does what it means and 
			most of the times what it should.
			if derived class is virtual and base class is not. Derived class may contian the vptr at the start
			of object. Directly converting pointer using c type cast from derived to base class pointer wont work here

Q.32: Lot of authors says that public inheritance means public and protected members of base class become public
		and protected members of the derived class.
		Well, I object terminology "they become". It is more likely saying copy paste the base class public section
		under public section of the derived one. But things do not work like that. public of base and derived could
		have same functionName and memberDataName, here derived name hides the base class name. If base class members 
		could have become part of derived, then same member data names would have caused "variable redefined" error.
		
