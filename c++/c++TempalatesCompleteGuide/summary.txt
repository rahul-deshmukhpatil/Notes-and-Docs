1 FUNCTION TEMPLATES

1.1    A FIRST LOOK AT FUNCTION TEMPLATES
	template<typename T>
	T max(T a, T b)

	template function has two types of parameters
	1. template parameter  T 
			- this is "type" template parameter in this case
			- which is most common type of template paramter
			- others are "value", "none type" template parameter
	2. calling parameters a and b.


1.1.1 DEFINING THE TEMPLATE

1.1.2 USING THE TEMPLATE

1.1.3 TWO-PHASE TRANSLATION
	1. Definition time:
		1. Language syntax
		2. non type-param dependant expressions
		3. static asserts
	2. Instantiation time:
		the full template instance will be generated
	3. Link time:
		Onyl one among extra copies generated in multiple translational units
		will be kept

1.2    TEMPLATE ARGUMENT DEDUCTION
	1. Ref call parameters do not decay
	2. Accepting by value type decays
	3. If two call accept by same template type param T, then type deduced for them
	must be same.
		int max(int, int);
		template<T>
		int max(T, T);

		max('c', 4.2); // Calls max(int, int);
		max<>('c', 4.2); // Error, tries to call templ version by arg deduct 
		max("abc", 4.2); // Error, tries to call templ version 

	1.2.2 Fixing Type conversion 
			::max(static_cast<double>(4), 7.2);
			::max<double>(4, 7.2)
			accept diff types T1 and T2, template<typename T1, typename T2> 
	1.2.3 Type deduction for default call arguments
		for def value for call argument, Its template type param should have default
		value
		
		template<typename T>
		void f(T = ""); // Error, how to deduce type T for f()
		
		template<typename T = std::string>
		void f(T = ""); // ok

1.3    MULTIPLE TEMPLATE PARAMETERS
	auto return type with trailing return type
	auto max(T1 a, T2 b) -> decltype(true? a: b)

1.3.1 TEMPLATE PARAMETERS FOR RETURN TYPES
	template<T1, T2, RT=long>
	problem is to provide custom RT type, you must specify T1 and T2

1.3.2 DEDUCING THE RETURN TYPE
	auto return type with trailing return type
	auto max(T1 a, T2 b) -> decltype(true? a: b)

1.3.3 RETURN TYPE AS COMMON TYPE
	using commont_type_t 
	auto max(T1 a, T2 b) -> std::common_type_t

1.4    DEFAULT TEMPLATE ARGUMENTS
		template<RT=long, T1, T2>
		types after default type i.e. T1 and T2 must be deducible from func call

1.5    OVERLOADING FUNCTION TEMPLATES
	
	function calls to template function are resolved on the templates seen till now

	ie.
		template<T>
		max(T, T);

		template<T>
		max(T a, T b, T c) {return max(max(a, b),c);} // only template max is seen
			// so for event T=int, above func will be called

		template<>
		max(int, int);


	int max(int a, int b);

	template<typename T>
	T max(T a, T b);

	::max(7, 42);                // calls the nontemplate for two ints 
	::max(7.0, 42.0);            // calls max<double> (by argument deduction)
	::max(’a’, ’b’);              //calls max<char> (by argument deduction)
	::max<>(7, 42);              // calls max<int> (by argument deduction)
	::max<double>(7, 42);        // calls max<double> (no argument deduction)

	automatic type conversion is not considered for the template type deduction
	so nontemplate version
	::max(’a’, 42.7);             //calls the nontemplate for two ints

	Specify return type 
		template<typename T1, typename T2>
		auto max(T1 a, T2 b);

		template<typename RT, typename T1, typename T2>
		RT max(T1 a, T2 b);

		auto a = ::max(4, 7.2);                     // uses first template

		# long double(RT) is different than T1 (deduced as double)
		auto b = ::max<long double>(7.2, 4);        // uses second template
	
		// ERROR: both function templates match
		// ensure only one among overloads matches 
		auto c = ::max<int>(4, 7.2); 


1.6    BUT, SHOULDN’T WE …?


1.6.1 PASS BY VALUE OR BY REFERENCE?
		1.6.1 Pass by Value or by Reference?
		Try to avoid references in templates
		The syntax is simple.
		Compilers optimize better.
		Move semantics often makes copies cheap.
		And sometimes there is no copy or move at all.

1.6.2 WHY NOT INLINE?
		inlining is replacing func copies locally.
		templates are generic functions.

1.6.3 WHY NOT CONSTEXPR?
		template<typename T1, typename T2>
		constexpr auto max (T1 a, T2 b)

1.7    SUMMARY

Function templates define a family of functions for different template arguments.

• When you pass arguments to function parameters depending on template parameters, function templates deduce the template parameters to be instantiated for the corresponding parameter types.

• You can explicitly qualify the leading template parameters.

• You can define default arguments for template parameters. These may refer to previous template parameters and be followed by parameters not having default arguments.

• You can overload function templates.

• When overloading function templates with other function templates, you should ensure that only one of them matches for any call.

• When you overload function templates, limit your changes to specifying template parameters explicitly.

• Ensure the compiler sees all overloaded versions of function templates before you call them.


2 CLASS TEMPLATES

2.1    IMPLEMENTATION OF CLASS TEMPLATE STACK

2.1.1 DECLARATION OF CLASS TEMPLATES

2.1.2 IMPLEMENTATION OF MEMBER FUNCTIONS

2.2    USE OF CLASS TEMPLATE STACK

2.3    PARTIAL USAGE OF CLASS TEMPLATES

2.3.1 CONCEPTS

2.4    FRIENDS

2.5    SPECIALIZATIONS OF CLASS TEMPLATES

2.6    PARTIAL SPECIALIZATION

2.7    DEFAULT CLASS TEMPLATE ARGUMENTS

2.8    TYPE ALIASES

2.9    CLASS TEMPLATE ARGUMENT DEDUCTION

2.10   TEMPLATIZED AGGREGATES

2.11   SUMMARY

3 NONTYPE TEMPLATE PARAMETERS

3.1    NONTYPE CLASS TEMPLATE PARAMETERS

3.2    NONTYPE FUNCTION TEMPLATE PARAMETERS

3.3    RESTRICTIONS FOR NONTYPE TEMPLATE PARAMETERS

3.4    TEMPLATE PARAMETER TYPE AUTO

3.5    SUMMARY

4 VARIADIC TEMPLATES

4.1    VARIADIC TEMPLATES

4.1.1 VARIADIC TEMPLATES BY EXAMPLE

4.1.2 OVERLOADING VARIADIC AND NONVARIADIC TEMPLATES

4.1.3 OPERATOR SIZEOF…

4.2    FOLD EXPRESSIONS

4.3    APPLICATION OF VARIADIC TEMPLATES

4.4    VARIADIC CLASS TEMPLATES AND VARIADIC EXPRESSIONS

4.4.1 VARIADIC EXPRESSIONS

4.4.2 VARIADIC INDICES

4.4.3 VARIADIC CLASS TEMPLATES

4.4.4 VARIADIC DEDUCTION GUIDES

4.4.5 VARIADIC BASE CLASSES AND USING

4.5    SUMMARY

5 TRICKY BASICS

5.1    KEYWORD TYPENAME

5.2    ZERO INITIALIZATION

5.3    USING THIS->

5.4    TEMPLATES FOR RAW ARRAYS AND STRING LITERALS

5.5    MEMBER TEMPLATES

5.5.1 THE .TEMPLATE CONSTRUCT

5.5.2 GENERIC LAMBDAS AND MEMBER TEMPLATES

5.6    VARIABLE TEMPLATES

5.7    TEMPLATE TEMPLATE PARAMETERS

5.8    SUMMARY

6 MOVE SEMANTICS AND ENABLE_IF<>

6.1    PERFECT FORWARDING

6.2    SPECIAL MEMBER FUNCTION TEMPLATES

6.3    DISABLE TEMPLATES WITH ENABLE_IF<>

6.4    USING ENABLE_IF<>

6.5    USING CONCEPTS TO SIMPLIFY ENABLE_IF<> EXPRESSIONS

6.6    SUMMARY

7 BY VALUE OR BY REFERENCE?

7.1    PASSING BY VALUE

7.2    PASSING BY REFERENCE

7.2.1 PASSING BY CONSTANT REFERENCE

7.2.2 PASSING BY NONCONSTANT REFERENCE

7.2.3 PASSING BY FORWARDING REFERENCE

7.3    USING STD::REF() AND STD::CREF()

7.4    DEALING WITH STRING LITERALS AND RAW ARRAYS

7.4.1 SPECIAL IMPLEMENTATIONS FOR STRING LITERALS AND RAW ARRAYS

7.5    DEALING WITH RETURN VALUES

7.6    RECOMMENDED TEMPLATE PARAMETER DECLARATIONS

7.7    SUMMARY

8 COMPILE-TIME PROGRAMMING

8.1    TEMPLATE METAPROGRAMMING

8.2    COMPUTING WITH CONSTEXPR

8.3    EXECUTION PATH SELECTION WITH PARTIAL SPECIALIZATION

8.4    SFINAE (SUBSTITUTION FAILURE IS NOT AN ERROR)

8.4.1 EXPRESSION SFINAE WITH DECLTYPE

8.5    COMPILE-TIME IF

8.6    SUMMARY

9 USING TEMPLATES IN PRACTICE

9.1    THE INCLUSION MODEL

9.1.1 LINKER ERRORS

9.1.2 TEMPLATES IN HEADER FILES

9.2    TEMPLATES AND INLINE

9.3    PRECOMPILED HEADERS

9.4    DECODING THE ERROR NOVEL

9.5    AFTERNOTES

9.6    SUMMARY

10 BASIC TEMPLATE TERMINOLOGY

10.1  “CLASS TEMPLATE” OR “TEMPLATE CLASS”?

10.2  SUBSTITUTION, INSTANTIATION, AND SPECIALIZATION

10.3  DECLARATIONS VERSUS DEFINITIONS

10.3.1 COMPLETE VERSUS INCOMPLETE TYPES

10.4  THE ONE-DEFINITION RULE

10.5  TEMPLATE ARGUMENTS VERSUS TEMPLATE PARAMETERS

10.6  SUMMARY

11 GENERIC LIBRARIES

11.1  CALLABLES

11.1.1 SUPPORTING FUNCTION OBJECTS

11.1.2 DEALING WITH MEMBER FUNCTIONS AND ADDITIONAL ARGUMENTS

11.1.3 WRAPPING FUNCTION CALLS

11.2  OTHER UTILITIES TO IMPLEMENT GENERIC LIBRARIES

11.2.1 TYPE TRAITS

11.2.2 STD::ADDRESSOF()

11.2.3 STD::DECLVAL()

11.3  PERFECT FORWARDING TEMPORARIES

11.4  REFERENCES AS TEMPLATE PARAMETERS

11.5  DEFER EVALUATIONS

11.6  THINGS TO CONSIDER WHEN WRITING GENERIC LIBRARIES

11.7  SUMMARY


