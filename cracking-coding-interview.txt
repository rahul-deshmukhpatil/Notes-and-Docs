Steps:
	Listen : 	any uniq condition
	Example: 	simple, dont use special case which doesnt cover edge cases

	Brute Force: just solve it
	Optimize:	optimize bottleneck, Unnecessary and Duplicate work
		
	Implement:	
	Test	:	test with 0,1,2,3,4 elements


Optimize
	BUD: bottleneck, Unnecessary and Duplicate work
	Optimize: reset result or return or break if certain cond says its not possible
	Base base: solve for 1, then 2,3,4... elements
	DS Brainstorm: Heap for median
	Best Conceivable Runtime: Min runtime you need.

Good Code:
	Correct
	Efficient
	Simple
	Clean and Readable

Use
	Proper DS
	Code Resuse: functions
	Moduler
	Robust and Generic functions


1.1 Is Unique: Implement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structures?
sort and check two consequtive

1.2 Check Permutation: Given two strings, write a method to decide if one is a permutation of the other.
check the length and count of each char

1.3 Write a method to replace all spaces in a string with '%20'. You may assume that the string
has sufficient space at the end to hold the additional characters, and that you are given the "true"
length of the string. (Note: If implementing in Java, please use a character array so that you can
perform this operation in place.)
EXAMPLE
Input:" M r 3ohn S m i t h
Output:"Mr%203ohn%20Smith"

two pointer impl

1.4 Palindrome Permutation: Given a string, write a function to check if it is a permutation of a palin-
drome. A palindrome is a word or phrase that is the same forwards and backwards. A permutation
is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.
EXAMPLE
Input:T a c t Coa
Output:True (permutations:
Hints: #106,
"taco cat", "atco eta",
etc.)

two pointer with skipping the white spaces


1.5 One Away: There are three types of edits that can be performed on strings: insert a character,
remove a character, or replace a character. Given two strings, write a function to check if they are
one edit (or zero edits) away.

s1. check first diff and try to check outcome for all 3 possible ops
s2. two pointers, find the short and long string, and keep boolean to forgive the 1 mistmatch 
	and increase pointer of larger string if mismatch, otherwise both

1.6
String Compression: Implement a method to perform basic string compression using the counts
of repeated characters. For example, the string a a b c c c c c a a a would become a 2 b l c 5 a 3 , If the
"compressed" string would not become smaller than the original string, your method should return
the original string. You can assume the string has only uppercase and lowercase letters (a - z).

Just count and build a string, using string stream, so no strings are added repeatatively 





