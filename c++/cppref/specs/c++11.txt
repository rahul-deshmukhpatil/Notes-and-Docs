move symantics
	possible to have uniq_ptr vector now, 
		as auto_ptr transferred ownership automatically upon copying
		uniq_ptr does not allow implicite move like auto_ptr
		may be its move constr is explicit

rvalue ref
	int x = 1
	int& xl = x;
	int&& xr = x; // error, cant bind rvalue ref to lvalue
	int&& xr = int{2};

	void f(int& x)
	void f(int&& x)

	f(xl): int& x: 1
	f(xr): int& x: 2
	f(3): int&& x: 3
	f(std::move(x)): int&& x: 1


perfect fw or universal fw
	template<typename T>
	void f(T& );
	T& & becomes T&
	T& && becomes T&

	void f(T&& );
	T&& & becomes T&
	T&& && becomes T&&

	you cant bind rvalue ref to the lvalue:
		rvalue ref is permission to utilize the passed on object
	you cant bind the lvalue ref to the temp
		temp is going to automatically destroyed, 
			so if you bind it to lvalue 
				and return it to parent func or pass it on to further functions
				copy use its interval allocated resources
			they are going to automatically going to be destroyed

	int&& z = 0; // NOTE: `z` is an lvalue with type `int&&`.
	f(z); // T is int&, deduces as f(int& &&) => f(int&)
	f(std::move(z)); // T is int, deduces as f(int &&) => f(int&&)


inititalizer list
	int iter_and_sum(const std::initializer_list<int>& list)
	{
		return std::accumulate(list.begin(), list.end(), 0);
	}
	
	std::initializer_list<int> list = {1, 2, 3, 4, 5};
	iter_and_sum(list);


Variadic templates
	template<typename... Args>
	class A{
		public:
		static void size()
		{
			std::cout << sizeof...(Args) << std::endl;
		}
	};

	template<typename F, typename... Args>
	auto foo(const F f, const Args... args) -> decltype(f)
	{
		const auto list = std::initializer_list<F>{f, args...};
		return std::accumulate(list.begin(), list.end(), F{0});
	}

Static assertions
	with constexpr var or expresions

auto
	auto&& ir = i; // int &
	auto&& irr = 5; // int &&

	auto add(X x, Y y) -> decltype(x + y);


lambda
	its a implicit unnamed class object with
	1. ref capture : 
			are always non-cost ref
			but can be declared std::as_const
	2. value capture:
			are const data memebers
			unless lamda is mutable making all value capture non-const


	auto add10 = [i,&j = std::as_const(j)] () mutable -> decltype(i) {
		i += 10; // allowed because labmda is mutable
		j += 10; // Error: because j is a const-ref
		return j;
	}

decltype: with cv and ref qualification
	int i = 1;
	int& ilr = i;
	decltype(ilr) ir = ilr; // int&

	int&& j = 1;
	decltype(j) jrr = j; // int&&

type aliases
	template<typename T>
	using cache = std::map<int, T>;

nullptr:
	of type nullptr_t
	is not implicitely convertible to bool unlike 

	f(int)
	f(char *)
	
	f(NULL) // ambiguous
	f(nullptr); // calls f(int*)

Strongly-typed enums
	enum class Color : int32_t
	{
		INVALID = 0,
		RED = 1,
		MAX = std::numeric_limits<std::underlying_type<Color>>::max(),
	};

constexpr
	if possible do it at compile time,
	but result of function or op must be same everytime its called.
	compile time or run time

delegating constructors
	constructors calling another constr
	A(int i): A(i, 0) {}

User-defined literals

override:
	throw error if funciton is not declared virtual in base class

final:
	dont allow any further child class to override it

default: functions
	use the compiler provided definition
	user declared but not user defined

delete:
	disables the functions from using

Range-based for loops:
	for (auto i: {1,2,3}) // auto=int
	// auto &= const int&, as std::initializer_list are immutable  
	for (auto& i: {1,2,3})

move functions

Converting constructors
	but prefers the init_list constr
	A a = {1}
	A a(1);
	A a = A{1}
	A a = {1.0} // Error, no implcite narrowing of double to int

Explicit conversion functions
	explicit operator bool(const A& a);

	if (a) // works
	bool _a = a; // error, its explcit

Inline namespaces
	if A has B and C namespace, you can access all decls in B and C
	as part of A;

	// this allows versoning
	namespace A {
		namespace V1 { int version() { return 1;} }
		namespace V2 { int version() { return 2;} }
	}


	A::version(); // calls A::V2::version();

Non-static data member initializers
	default constr uses these valus
	
	struct A {
		int a = 5;
	};

Right angle brackets
	std::map<int, std::pair>> m; // prev >> was treated as extraction operator

Ref-qualified member functions
	struct A {
		int* get() {return ptr;}
		int* get() const& {return ptr;}
		int* get() && { 
			tmp_ptr = ptr;
			ptr = nullptr;
			return tmp_ptr;i
		}
	};	

	A{}.get(); // get &&

	const A& a = ...;
	a.get(); // get &&
	std::move(a).get(); // get const &&
	std::move(a).get() // get &&

Trailing return types
	template<typename T)
	decltype(T{} + T{}) add(T a, T b);
	auto add(T a, T b) -> decltype(a + b);
