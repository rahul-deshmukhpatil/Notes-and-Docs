
Compile And Linking is not mentioned as  point 1.1.4
	
	1.2.2 Fixing Type conversion 
	1.2.3 Type deduction for default call arguments
		All the type arguments after last type argument with default value must be deducible 


	1.3.1 Template Parameters for Return Types
		Not really good description to introduce "return template type"


	115     1.3.2 Deducing the Return Type
		explanation of why decay must be used to remove reference from type is ambigous
		Under what conditions T can be reference?
		And example we are using has T1 and T2, 
			1. which could be deduced to be reference?
			2. why are you referring T in this point?

		simplify: c++11 auto is replaced with ->  std::decay<decltype(true?a:b)>::type

	1.5: on Page no 18, you are binding rvalue to const lvalue reference
		::max(7,42,68) => template<T> max(T& a, T& b,  T& c)
		Its bit heavy to understand at this point. Also mention same thing when
		value types are discussed, how

		1> binding rvalue to const lvalue ref works. 
			ans: because using const lvalue ref you can not change rvalue.
			Also,
				int i=6;
				double const& d = i; // using lvalue to rvalue implicit conv
									// a temp is created of rvalue type
									// then bind rvalue to const ref to lvalue

				func(const int& i);
				func(8); // works similarily, rvalue binded to lvalue const ref. 

		2> If implicite conversion for class S to another type T which returns T&
		i.e lvalue reference exists, then you can bind rvalue of type S to 
		non-const lvalue ref of T


2.5 SPECIALIZATIONS OF CLASS TEMPLATES

	Specilizing individual member functions should be a saparate sub point
	Full Specializing whole template class should be a saparate sub point

	However, if you specialize a class template, you must also specialize all member functions. 
		This is not correct https://godbolt.org/z/9od9zab35
		https://stackoverflow.com/questions/5949992/template-class-member-function-only-specialization

	It is possible to specialize single member function for a particular type parameter to 
	template class.	This will cause template class instantition for that type.

	But once you specialize single member function outside of template class declaration for a type
	parameter to template class, then you can not fully specialize template class for that type.


2.6    Partial Specialization

		No description of how to resolve below
				MyClass<int, int> mii; // Error, Ambibuity MyClass<T,T> or MyClass<T, int>
			


2.9 Class Template Argument Deduction 
	Stack stringStack = "bottom"; // Stack<char const[7]> deduced since C++17

	stringStack should be named as cstringStack to distinguish between std::string and cstring

	The description does not specify why this is not valid
	Stack stringStack = "bottom";  // Stack<std::string> deduced, but still not valid

	deduction guide explanation sequence is not that good.


3.3 RESTRICTIONS FOR NONTYPE TEMPLATE PARAMETERS
	Can labmda function be non-type template parameter?


		With c++17, you can define non type template parameter to generally accept any types value argument



5 TRICKY BASICS

5.1    KEYWORD TYPENAME

5.2    ZERO INITIALIZATION

5.3    USING THIS->

5.4    TEMPLATES FOR RAW ARRAYS AND STRING LITERALS

5.5    MEMBER TEMPLATES

5.5.1 THE .TEMPLATE CONSTRUCT
		WHY YOU DONT NEED TO USE .TEMPLATE CONSTRUCT WITH TEMPLATE FUNCTIONS AND WITH JUST TEMPLATE
		MEMBERS?

5.5.2 GENERIC LAMBDAS AND MEMBER TEMPLATES

5.6    VARIABLE TEMPLATES

		template<typename T>
		struct MyClass
		{
			static constexpr T veryLongName = 10000;
		};

		template<typename T>	
		T shortName = MyClass<T>::veryLongName;

		can i use auto instead of T in above variable template declaration?

5.7    TEMPLATE TEMPLATE PARAMETERS
		Final full stack impl example is still meant for the pre-c++17:
		declaration/definition of operator= and Stack itself does not consider 
		the 2nd template parameter i.e Allocator could be defaulted

		Final full stack usage example is wrong:

		fStack.push(4.4); // should not be done, use only copied iStack 
		std::cout << fstack.top() << std::endl; // Just pop, and you will get 2.0

		include example of assigning ivStack <int, std::vector> to fdqStack <float, std::deque>

5.8    SUMMARY




6 MOVE SEMANTICS AND ENABLE_IF<>

6.1    PERFECT FORWARDING

6.2    SPECIAL MEMBER FUNCTION TEMPLATES
		explain why templ constrctr fails
		P p3(p1); // ERROR  : templ function is better match than 3rd constr
					// and you can not copy P into string P.n

6.3    DISABLE TEMPLATES WITH ENABLE_IF<>

6.4    USING ENABLE_IF<>

6.5    USING CONCEPTS TO SIMPLIFY ENABLE_IF<> EXPRESSIONS

6.6    SUMMARY

7 BY VALUE OR BY REFERENCE?

7.1    PASSING BY VALUE
	7.1.2 Passing by value decays
		example : 
		printV("hi"); // args decays to const char *, but const and volatile are stripped 
						// off while decaying

		int arr[4];
		printV(arr); // its written that it decays to const char *, but its int array

7.2    PASSING BY REFERENCE
		sometimes passing is not possible
		You mean "sometimes passing BY REF is not possible" ?

7.2.1 PASSING BY CONSTANT REFERENCE

7.2.2 PASSING BY NONCONSTANT REFERENCE

7.2.3 PASSING BY FORWARDING REFERENCE

7.3    USING STD::REF() AND STD::CREF()

	isLess(isLess(std::cref(s) < "hello"); // This is incorrect
	isLess(isLess(std::cref(s), "hello"); // This is correct

7.4    DEALING WITH STRING LITERALS AND RAW ARRAYS

7.4.1 SPECIAL IMPLEMENTATIONS FOR STRING LITERALS AND RAW ARRAYS

7.5    DEALING WITH RETURN VALUES

7.6    RECOMMENDED TEMPLATE PARAMETER DECLARATIONS

7.7    SUMMARY

8 COMPILE-TIME PROGRAMMING

8.1    TEMPLATE METAPROGRAMMING

8.2    COMPUTING WITH CONSTEXPR

8.3    EXECUTION PATH SELECTION WITH PARTIAL SPECIALIZATION
		mention function foo has two instantiations because Helper object h is of 2 types

8.4    SFINAE (SUBSTITUTION FAILURE IS NOT AN ERROR)

8.4.1 EXPRESSION SFINAE WITH DECLTYPE
		rename the function "undeclared" in the first example. Otherwise it sounds
		to be some standard lib function.

		else {
			some_undeclared_func(t); // not error, depends on template type param T
			some_undeclared_func(); // error, oveload does not depend on type param T 
			static_assert(false, "is integral"); // error, always asserts false
			static_assert(!std::is_intergral_v<T>, "is integral"); // OK 
		}

8.5    COMPILE-TIME IF
		below is an error, but marked as if its OK, seems like copy paste error from
		prev example
		static_assert(!std::numberic_limits<char>::is_signed, "char is signed"); // error 

8.6    SUMMARY

9 USING TEMPLATES IN PRACTICE

9.1    THE INCLUSION MODEL

9.1.1 LINKER ERRORS

9.1.2 TEMPLATES IN HEADER FILES

9.2    TEMPLATES AND INLINE

9.3    PRECOMPILED HEADERS

9.4    DECODING THE ERROR NOVEL

9.5    AFTERNOTES

9.6    SUMMARY

10 BASIC TEMPLATE TERMINOLOGY

10.1  “CLASS TEMPLATE” OR “TEMPLATE CLASS”?

10.2  SUBSTITUTION, INSTANTIATION, AND SPECIALIZATION

10.3  DECLARATIONS VERSUS DEFINITIONS

10.3.1 COMPLETE VERSUS INCOMPLETE TYPES

10.4  THE ONE-DEFINITION RULE
	Definitions identical across what? if it can be only once defined?
	
	Class types and templates, partial splz templats (except explicite full specilization) 
	inline func, variables can be defined only once per translational unit and all these 
	definitions across all-tranlational units must be identical
	
10.5  TEMPLATE ARGUMENTS VERSUS TEMPLATE PARAMETERS

10.6  SUMMARY

11 GENERIC LIBRARIES

11.1  CALLABLES

11.1.1 SUPPORTING FUNCTION OBJECTS

11.1.2 DEALING WITH MEMBER FUNCTIONS AND ADDITIONAL ARGUMENTS

11.1.3 WRAPPING FUNCTION CALLS
	you callable might return void, in which case above definition will cause error
	as void is incomplete type. there are 2 ways to deal with this
	1> read book, its bit difficult to understand this.


11.2  OTHER UTILITIES TO IMPLEMENT GENERIC LIBRARIES

11.2.1 TYPE TRAITS

11.2.2 STD::ADDRESSOF()

11.2.3 STD::DECLVAL()

11.3  PERFECT FORWARDING TEMPORARIES

11.4  REFERENCES AS TEMPLATE PARAMETERS

11.5  DEFER EVALUATIONS

11.6  THINGS TO CONSIDER WHEN WRITING GENERIC LIBRARIES

11.7  SUMMARY


