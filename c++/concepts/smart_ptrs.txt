https://www.youtube.com/watch?v=xGDLkt-jBJ4&list=PLerNAYTyMSwabSnDjFmYzoXU-68RTUwdq&index=16&t=2232s

smart pointers or references are extra level of "

uniq_ptrs:
	just 8 bytes pointer
	move only, cant copy
	have deleter functionality
	handles deletion of arrays correctly with delete [] 

	cons:
		cant handle uniq_ptr<Base2> initialized with Derv pointer,
		where Derv is inherited from Base1 and Base2


shared_ptrs
	stores reference count and handles above con of uniq_ptr
	has control block, which saves
		- ref count
		- weak ref count
		- custom deleter
		- Actual pointer to Derv if its shared_ptr<Base2> intialized with Derv pointer



Always use make_uniq and make_shared
	- make_shared to avoid above cons scenario of multiple inheritance
	- make_shared allocated the control block and object in contigious memory
		- deleter knows how to free this single block of memory by destroying control block and object separatly
	-

weak_ptr: is ticket to shared_ptr. It has exactly same control block as of shared_ptr.
		if weak ref count is not 0 that means you can still get shared_ptr to object is destroyed only if both
		ref counts are 0.
	
	in case of make_shared, control block is contigious, so upon refcounts become 0, deleter is called for T.
	but actual memory block is freed only once weak_ptr goes out of context, check video


	usage:
		if (std::shared_ptr ptr = wk_ptr.lock())  // if its not null
		// auto ptr = wk_ptr.lock() 
		// if (ptr != nullptr)
		{
			use(ptr);
		}


	
