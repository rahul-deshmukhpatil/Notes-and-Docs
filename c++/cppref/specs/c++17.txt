template argument deduction for class templates
	auto a = A(1,2.0); // template A<int, double>

declaring non-type template parameters with auto
	only integral int,char,enum etc are allowed as non-type template parameters
	no float, doubles or user defined classes are allowed

	template<auto... args>
	struct A{ static auto value = (... + args);}
	
folding expressions
	a = (... + args)
	a = (e1 + ... + e2) // where only 1 of e1 and e2 could be variadic arg?

new rules for auto deduction from braced-init-list
	auto a{1}; // int not initializer_list<int>
	auto a{1,2,3} // error, must be single element

constexpr lambda
	constexpr auto l = [] () {}
	auto l = [] () constexpr {}

lambda capture this by value
	// old way was only by reference
	auto by_ref_impl = [this] { return x; };
	// new by value implementation
	auto by_value_impl = [*this] { return x; };
	
inline variable s (replacement for extern linkage variables)
	they can replace global or static inline variables in headers which we have define with extern linkage
	inlines have extern linkage implicitely
	they can be non-const
	compiler at link time just keeps 1 copy of the inline variable as per ODR
	constexprs are implicitely inline

nested namespaces
	namespace X { namespace Y{ inline int x = 10; }}
	X::Y::x = 20;
	
structured bindings
	const auto& [x,y] = pair_xy;
	
selection statements with initializer
	if (int x = foo(); x > 10) {}
	switch (int x = foo(); x) {}

constexpr if
	if constexpr(std::is_integral_v<T>)
	{
		return T{1} + 10;
	} 
	else
	{
		return 'a' + 10;
	}
	
utf-8 character literals

direct-list-initialization of enums
	enum E : unsigned char {};
	E e {-1}; // error
	E e {256}; // error
	E e {2}; // error


[[fallthrough]], [[nodiscard]], [[maybe_unused]] attributes

[[nodiscard]] int getVal();
int func([[maybe_unused]] int x);
[[fallthrough]]
case 1: 
	[[fallthrough]]
case 2:

__has_include

class template argument deduction
	std::vector v{1,2,3};
	auto l = std::lock(mutex);
