https://en.cppreference.com/w/cpp/language/function-try-block

T::T() try
{
} catch(SomeEx se) {}
catch(Ex& e) // just caught as the base Ex
{
	// explcite return;// only works for destr so that you could prevnt excp from leaving destr

	throw Base(Ex); // explicit rethrow Base of Ex i.e Ex::Base.
	//otherwise	at end implcite throw; // implicitly throw original exception not Ex.
}

T func() try
{
} catch(SomeEx se) {}
catch(Ex& e) // just caught as the base Ex
{
	// throw
	// throw Base(Ex); // explicit rethrow Base of Ex i.e Ex::Base.
	// return T; return explicitely value in case of exception. allowed
	
	// return; // implicite return at the end of catch blocl, NO impliciti re-throw of original exception.
	// If ret type T is void its ok, 
	// otherwise undefined behavior . ie. no return value and its  
}


around constr or any function
catches any excpetion in memb-init, delegating constr, or member body
Any completly initialized member or base is destructed before catch starts execution.

exception is implicitely re-thrown at the end of catch block if you dont
throw it. so better to write it.

Undef behavior :Dont use non-static member variables or base, in catch body.
Catch cant have return statement, except Destructor to prevent rethrowing.

Prim use : for constr and destr memb-init list
For functions : catch block does not destroy func params by value. Its callers
	exception handle job.
for copy-move constr: func-try-catch block cant cache exceptions. Its handled in callers context
