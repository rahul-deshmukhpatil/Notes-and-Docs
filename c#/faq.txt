# Questions
Why structs are more efficient than classes
	https://stackoverflow.com/questions/13049/whats-the-difference-between-struct-and-class-in-net
	value type lives on stack, reference type variable lives on stack which contains reference or pointer to heap memory where actual body of the 
	reference type lives

	value types memory is freed automatically and deterministic
	refernce types freed at runtime after all refernces get exausted and its still non-deterministic when they are freed

	struct have default public access specifier, class have private?
	structs cant be inherit from except from System.ValueType
	struct can not be base class either : ie sealed
	Abstract and sealed modifiers are not allowed and struct member cannot be protected or protected internals.
	No abstract or virtual members. Only override the methods from the System.ValueType (or System.Object ? check)
	A struct can implement interfaces
	A struct can be used as a nullable type and can be assigned a null value.
	
	struct is made to copy the whole object efficiently
	class are big and made to copy only reference. So any change via one reference to same object is visible via another reference variable

	https://stackoverflow.com/questions/7484735/c-struct-vs-class-faster
	Do not define a structure unless the type has all of the following characteristics:

	It logically represents a single value, similar to primitive types (integer, double, and so on).
	It has an instance size smaller than 16 bytes.
	It is immutable.
	It will not have to be boxed freque

Why int is boxed to object while passing to the WriteLine
	https://stackoverflow.com/questions/27132042/is-boxing-involved-when-calling-tostring-for-integer-types
	WriteLine accepts the string and array of Objects. To convert value type into object you box it

Implement singleton in c#
	https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff650316(v=pandp.10)
	use a public static property with private constructor
	public static ClassName Instance => ClassName.instance;
	or for multithreaded use static method with lock for delayed contruction



Can we have global methods
	No. In c# only class static methods are allowed. Which are more like global methods but you do not clutter
	global namespace with static methods.
	use the syntax Namespace.Class to access Namespace.Class.GlobalMethod to access GlobalMethod like global

Extension methods vs Static methods
	https://stackoverflow.com/questions/19142182/what-is-difference-between-extension-method-and-static-method
	Extension methods are static methods.

	int result = stringValue.BMethod();
	int result = BClass.BMethod(stringValue);

	the compiler sees the first form, and if the BClass is usable (it has a proper using and is in a referenced assembly), 
	then it will turn it into the second method's IL for you. It's purely a convenience.


Why compiler emits callvirt even for non-virtual methods? [duplicate]
	https://stackoverflow.com/questions/14283373/why-compiler-emits-callvirt-even-for-non-virtual-methods
	https://stackoverflow.com/questions/845657/why-is-the-c-sharp-compiler-emitting-a-callvirt-instruction-for-a-gettype-meth


difference between const and readonly field
	const field is static in nature and belong to class
	readonly is initiated in declaration or constructor but belongs to instnace

Abstrct vs interface
	both define interaface, abstract might have default implementation for fields, constructors, members
