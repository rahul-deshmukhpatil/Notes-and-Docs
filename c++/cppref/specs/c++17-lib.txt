std::variant
	can have same types,
	can provide same type with diff cv qualification

	default contr of 1st element

	all types are allocated within std::variant
	no dynamic allocation

	better than union can tell you which type is stored

	index
	std::get<int or index> : throws error if type or index is not stored
	std::get_if<int>  : returns pointer

	std::variant_size
	std::holds_alternative<T>(v); 
	std::variant_alternative

std::optional
	default contr of 1st element

	all types are allocated within std::optional
	no dynamic allocation

	throws bad optional access if optional is not set
	*x 
	x.value()
	if (x) // is bool(x) or x.has_value()

std::any
	std::any x;
	x = 5;
	x = 5.5;
	x.has_value()
	std::any_cast<std::string>(&x) // throws bad_any_cast if x doesnt have std::string
	x.emplace()
	make_any(4);
	int x = std::any_cast<int>(x);

std::visit
	std::variant<int, double, std::string> x;
    x = 5;
	// calls labmda(int x);
	std::visit([](auto&& x) { std::cout << "Lambda for variant type: " << x << "\n"; }, x);

std::invoke
	int add(int x, int y);
	std::invoke(add, 1, 2); // returns 3
	
	template<typename... Args>
	foo callAdd(Args&&... args)
	{
		// Args could be lvalue or rvalue
		// std::move is std::static_cast<std::remove_reference_t<T>&&>(t);
		// T&& std::fw(std::remove_reference_t<T>& t) { return std::static_cast<T&&>(t) };
		std::invoke(add, std::forward<Args>(args)...);
	}

std::apply
	std::apply(foo, std::tuple(1,2));

std::bind
	using std::pacement_strategy::_1;
	std::function<void(string, int)> f = std::bind(foo, "some value", _1)

	f(99); // calls std::bind(foo, "some value", 99)

std::string_view
	auto sv = "Hello"sv or std::string() or "Hello";


std::clamp
	clamp(v, x,y); v=x of v<x, v=v, or v=y if v>y
	std::clamp(10, 20, 30, std::less<int>{})); // returns 20
