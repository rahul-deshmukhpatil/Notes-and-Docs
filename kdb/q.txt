--- Enlist 

q)))(1; 2.4; 4;)
enlist[1;2.4;4;]
q)))(1; 2; 4;)
enlist[1;2;4;]
q)))(1; 2; 4)
1 2 4


q)))1 2.4 4
1 2.4 4
q)))(1 2.4 4)
1 2.4 4

---- needs homogenous for below syntax to be list
q)))(1; 2.4; 4)
1
2.4
4

--- concat with ,
q)))l:1 2 3
q)))m:2,3,4
q)))l,m
1 2 3 2 3 4
q)))m,l
2 3 4 1 2 3

--- new list with number of elements
q)))15#1 2 3
1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
q)))0#1 2 3
`long$()
q)5#5.2 2 3
5.2 2 3 5.2 2


--- add two lists or add to list
q)))1 2 3 + 4 5 6
5 7 9
q)))1 2 3 + 4
5 6 7

--- & and | operators to all lists with single result / or result at each step \
q)))(&/) 50 30 40 20
20
q)))(&\) 50 30 40 20
50 30 30 20


--- symbols list
q)(`one; `two; `three)
`one`two`three


--- til
q)3 + til 4
3 4 5 6


1.1 Starting q
1.2 Variables
1.3 Whitespace
1.4 The Q Console
1.5 Comments
1.6 Assignment
1.7 Order of Evaluation
1.8 Data Types 101
1.9 Lists 101

	#slicing list
		q)4#til 10
		0 1 2 3
		q)-4#til 10
		6 7 8 9

	# empty list 
		q)0#til 3
		`long$()
		q)0#til `
		`symbol$()

	# indexing list
		q)L:til 10
		q)L[0]
		0
		q)L[9]
		9
		q)L[10]
		0N   ======> Something, not present
		
	# & and | over two lists
		q)1 2 100 & 90 100 101
		1 2 100
		q)1 2 100 | 90 100 101
		90 100 101

	# Dont bother to know below
		q))L:{x*x}
		q))(L\) til 3
		0 1 2         
		0 1 4         
		0 1 16        
		0 1 256       
		0 1 65536     
		0 1 4294967296
		0 1 0         

1.10 Functions 101
	functions could be
		1. explcite infix functions 
			L:{x*y} [3;4] == L:{[x;y] x*y;}  L[3;4]
		2. inbuilt binary operators

1.11 Functions on Lists 101
1.12 Example: Fibonacci Numbers
1.13 Example: Newtonâ€™s Method for nth Roots
1.14 Example: FIFO Allocation
1.15 Dictionaries and Tables 101
1.16 q-sql 101
1.17 Example: Trades Table
1.18 File I/O 101
1.19 Interprocess Communication 101
1.20 Example: Asynchronous Callbacks
1.21 Websockets 101






