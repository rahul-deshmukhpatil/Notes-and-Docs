1. Design : cache friendly sequential processing, 
			good algorithm O(log n), O(1)
			avoid calls you dont need,
			doing nothing is truly fast.
			single threaded program,
			or use multithreading cuatiously with pinning cores on same numa core, 
			avoid synchronization, no locks, use atomics+memory_order if necesssary
			avoid system calls
			no disk file read/write once app starts
			Cache warming
			Allocate memory needed in intiailization routine at the start of application
			Keep memory in control, Do not free memory, just buy more RAM,
				1. allocate : find free mem + bring cold metadata + cold free mem into cache
				2. deallocte : return memory + might be freeing hot cache lines

1.1 Low Level Design
			1. keep things used togather in one denormalized struct. 
				anyways aligned structs have free mem to utilize
				Instr = Id + priceTick + DecInQty
			2. Try to noinline functions, which are not in hot path
				ie. logging functions used to print log
			3. Instr Cache: Try to help compiler and HW, branch predictor
			4. Data Cache: Try to keep things together

2. C++ :	dont use costlier things
			1. which allocate memory, new, malloc (might have lock)
			2. things happenig in dynamic time, RTTI, dy_cast, virt
			3. no exceptions in critical paths
			4. user space locks.
			5. use attributes for branch prediction
			6. avoid local static vars in function
				use (its checks if its initialised and uses lock to initialize first time
			7. explicit alignment if needed
			8. understand padding how it works

2.1 STL:	1. uniq_ptr and shared_ptr are abstractions and they have cost
			2. understand continers, use custom google, FB containers
			3. understand algorithms
			4. use good combination of allocators, local and global allocators
			5. reserve memory for the data structures

2.2 Custom C++:
			1. use custom hash maps
				flat map, set : sorted vector
				flat unordered map, set : vector with just hash keys as its index, another vector having value for index
			2. Use custom shared_ptr whos count can only go upto 15, If it reaches 15, its ptr is never freed

3. Build :  1. optimization flags,
			2. static libs,
			2. compiler flags
			3. build for target architecture
			4. microbenchmark, cal whole latecy
			5. do profiling of app
			6. compiler with diff compilers, intel cc, clang
			7. jmalloc, tcmalloc

4. OS : tune OS and kernel, custom kernel,  
		Basic unit of sync,read from or write to next level, is current level cache line
		Learn about cache, cache flushing, cache refreshing

5. HW : buy fast RAM, more cache, custom HW, boost freq
		do trivial cal on FPGA, embed them on switch,
